-- Criação do banco de dados para o projeto Marketplace Avaliação 2 do Curso De Administrador De Banco De Dados
-- MySQL Script generated by MySQL Workbench 
-- Fri Sep  6 08:50:11 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
/*-- Criação do esquema 'marketplace' com charset UTF8.
-- O charset UTF8 é utilizado para garantir compatibilidade com textos em múltiplos idiomas,
-- possibilitando a inserção de caracteres especiais, como acentos e símbolos de diferentes alfabetos.
-- Isso é importante em um ambiente de marketplace, que pode lidar com usuários de diversas regiões do mundo.*/
-- Imformações gerais: nos compos onde houver "NOT NULL" determina que esse campo não pode ser nulo ou ficar em branco.

CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- Criação da tabela "Categoria".
-- Essa tabela armazena as categorias de produtos disponíveis no Marketplace.
-- Cada produto pertence a uma categoria, o que facilita a organização e a navegação para os usuários.

-- -----------------------------------------------------
-- Table `mydb`.`Categoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Categoria` (
  `idCategoria` INT NOT NULL auto_increment, -- Este campo é a chave primária, sendo um identificador único para cada categoria e não pode ser nulo.
  `nome_categoria` VARCHAR(90) NOT NULL, -- Este campo armazena o nome descritivo da categoria e não pode ser nulo.
  `descricao` longtext not null, -- Contém a descrição de cada categoria de produtos.
  PRIMARY KEY (`idCategoria`))
ENGINE = InnoDB;

-- Criação da tabela "Telefone_Vendedor"
-- Tabela 'Telefone_Vendedor' criada para armazenar os telefones dos vendedores.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Telefone_Vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Telefone_Vendedor` (
  `idTelefone` INT NOT NULL auto_increment, -- Identificador único para cada telefone.
  `1telefone_vendedor` VARCHAR(45) NOT NULL, -- Número de telefone do vendedor.
  `tipo` VARCHAR(45) NOT NULL, -- Tipo de telefone (ex: celular, fixo...).
  PRIMARY KEY (`idTelefone`)) -- Define uma chave primária composta, garantindo que cada telefone seja único para um vendedor específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Email_Vendedor"
-- Essa tabela armazena os endereços de e-mail dos vendedores.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Email_Vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Email_Vendedor` (
  `idEmail_Vendedor` INT NOT NULL auto_increment,  -- Identificador único para cada e-mail.
  `email_vendedor` VARCHAR(90) NOT NULL, -- Endereço de e-mail do vendedor.
  PRIMARY KEY (`idEmail_Vendedor`)) -- Define uma chave primária composta, garantindo que cada email seja único para um vendedor específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Endereço_Vendedor"
-- Essa tabela armazena os endereços dos vendedores.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Endereco_Vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Endereco_Vendedor` (
  `idEndereco_vendedor` INT NOT NULL auto_increment,  -- Identificador único para cada endereço.
  `rua` VARCHAR(45) NOT NULL,  -- Nome da rua do endereço.
  `numero` INT NOT NULL,   -- Número do endereço.
  `bairro` VARCHAR(90) NOT NULL,  -- Nome do bairro.
  `complemento` varchar(90), -- Uma informção opcional caso haja a necessidade de complementar o endereço.
  `cep` INT NOT NULL,  -- Código postal do endereço.
  `estado` VARCHAR(90) NOT NULL, -- Nome do estado do endereço.
  `pais` VARCHAR(90) NOT NULL, -- País do endereço 
  PRIMARY KEY (`idEndereco_vendedor`)) -- Define uma chave primária composta, garantindo que cada endereço seja único para um vendedor específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Telefone_Fornecedor"
-- Essa tabela armazena os números de telefone dos fornecedores.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Telefone_Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Telefone_Fornecedor` (
  `idTelefone_Fornecedor` INT NOT NULL auto_increment,  -- Identificador único para cada telefone.
  `telefone_fornecedor` VARCHAR(45) NOT NULL,  -- Número do telefone do fornecedor.
  `tipo` VARCHAR(45) NOT NULL, -- Tipo de telefone (ex: celular, fixo...).
  PRIMARY KEY (`idTelefone_Fornecedor`)) -- Define uma chave primária composta, garantindo que cada telefone seja único para um fornecedor específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Email_Fornecedor"
-- Essa tabela armazena os emails dos fornecedores.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Email_Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Email_Fornecedor` (
  `idEmail_Fornecedor` INT NOT NULL auto_increment, -- Identificador único para cada email.
  `email_fornecedor` VARCHAR(90) NOT NULL, -- Endereço de email do fornecedor.
  PRIMARY KEY (`idEmail_Fornecedor`)) -- Define uma chave primária composta, garantindo que cada email seja único para um fornecedor específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Endereço_Fornecedor"
-- Essa tabela armazena o endereço dos fornecedores.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Endereco_Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Endereco_Fornecedor` (
  `idEndereco_Fornecedor` INT NOT NULL auto_increment,  -- Identificador único para cada endereço.
  `rua` VARCHAR(45) NOT NULL, -- Nome da rua do endereço.
  `numero` INT NOT NULL,  -- Número do endereço.
  `bairro` VARCHAR(45) NOT NULL, -- Bairro onde o fornecedor está localizado.
  `complemento` varchar(90), -- Uma informção opcional caso haja a necessidade de complementar o endereço.
  `cep` INT NOT NULL,  -- Código Postal do endereço.
  `estado` VARCHAR(45) NOT NULL, -- Estado do endereço do fornecedor.
  `pais` VARCHAR(45) NOT NULL, -- País do fornecedor.
  PRIMARY KEY (`idEndereco_Fornecedor`)) -- Define uma chave primária composta, garantindo que cada endereço seja único para um fornecedor específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Fornecedor"
-- Essa tabela armazena as informações dos fornecedores.
-- -----------------------------------------------------
-- Table `mydb`.`Fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Fornecedor` (
  `idFornecedor` INT NOT NULL auto_increment,  -- Identificador único para cada fornecedor.
  `nome_fornecedor` VARCHAR(90) NOT NULL, -- Nome do fornecedor.
  `cnpj_fornecedor` INT NOT NULL,  -- CNPJ do fornecedor, deve ser único para cada fornecedor.
  `Telefone_Fornecedor_idTelefone_Fornecedor` INT NOT NULL,  -- Chave Secundaria referenciada pela tabela "idTelefone_Fornecedor".
  `Email_Fornecedor_idEmail_Fornecedor` INT NOT NULL,  -- Chave Secundaria referenciada pela tabela "idEmail_Fornecedor".
  `Endereco_Fornecedor_idEndereco_Fornecedor` INT NOT NULL,  -- Chave Secundaria referenciada pela tabela "idEndereco_Fornecedor".
  PRIMARY KEY (`idFornecedor`, `Telefone_Fornecedor_idTelefone_Fornecedor`, `Email_Fornecedor_idEmail_Fornecedor`, `Endereco_Fornecedor_idEndereco_Fornecedor`), /* Define a chave primária composta para a tabela 'Fornecedor', 
  garantindo que a combinação dos campos 'idFornecedor', 'Telefone_Fornecedor_idTelefone_Fornecedor', 'Email_Fornecedor_idEmail_Fornecedor', e 'Endereco_Fornecedor_idEndereco_Fornecedor' seja única em cada registro.*/
  INDEX `fk_Fornecedor_Telefone_Fornecedor1_idx` (`Telefone_Fornecedor_idTelefone_Fornecedor` ASC) , -- Cria um índice para o campo 'Telefone_Fornecedor_idTelefone_Fornecedor' para melhorar a velocidade das consultas que utilizam esse campo.
  INDEX `fk_Fornecedor_Email_Fornecedor1_idx` (`Email_Fornecedor_idEmail_Fornecedor` ASC) , -- Cria um índice para o campo 'Email_Fornecedor_idEmail_Fornecedor' para melhorar a velocidade das consultas que utilizam esse campo.
  INDEX `fk_Fornecedor_Endereco_Fornecedor1_idx` (`Endereco_Fornecedor_idEndereco_Fornecedor` ASC) , -- Cria um índice para o campo 'Endereco_Fornecedor_idEndereco_Fornecedor' para melhorar a velocidade das consultas que utilizam esse campo.
  CONSTRAINT `fk_Fornecedor_Telefone_Fornecedor1` -- Define uma restrição de chave estrangeira para o campo 'Telefone_Fornecedor_idTelefone_Fornecedor', garantindo que ele referencie um registro válido na tabela 'Telefone_Fornecedor'.
    FOREIGN KEY (`Telefone_Fornecedor_idTelefone_Fornecedor`)
    REFERENCES `mydb`.`Telefone_Fornecedor` (`idTelefone_Fornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Fornecedor_Email_Fornecedor1` -- Define uma restrição de chave estrangeira para o campo 'Email_Fornecedor_idEmail_Fornecedor', garantindo que ele referencie um registro válido na tabela 'Email_Fornecedor'.
    FOREIGN KEY (`Email_Fornecedor_idEmail_Fornecedor`)
    REFERENCES `mydb`.`Email_Fornecedor` (`idEmail_Fornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Fornecedor_Endereco_Fornecedor1` -- Define uma restrição de chave estrangeira para o campo 'Endereco_Fornecedor_idEndereco_Fornecedor', garantindo que ele referencie um registro válido na tabela 'Endereco_Fornecedor'.
    FOREIGN KEY (`Endereco_Fornecedor_idEndereco_Fornecedor`)
    REFERENCES `mydb`.`Endereco_Fornecedor` (`idEndereco_Fornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Vendedor"
-- Essa tabela armazena as informações dos Vendedores.
-- -----------------------------------------------------
-- Table `mydb`.`Vendedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Vendedor` (
  `idVendedor` INT NOT NULL auto_increment, -- Identificador único para cada vendedor.
  `nome_vendedor` VARCHAR(90) NOT NULL, -- Nome do vendedor.
  `cnpj_vendedor` INT NOT NULL, -- CNPJ do vendedor, deve ser único para cada vendedor.
  `Telefone_Vendedor_idTelefone` INT NOT NULL, -- Número de telefone do vendedor.
  `Email_Vendedor_idEmail_Vendedor` INT NOT NULL, -- Endereço de email do vendedor.
  `Endereco_Vendedor_idEndereco_vendedor` INT NOT NULL, -- Endereço do vendedor.
  `Fornecedor_idFornecedor` INT NOT NULL, -- ID do fornecedor relacionado ao vendedor.
  PRIMARY KEY (`idVendedor`, `Telefone_Vendedor_idTelefone`, `Email_Vendedor_idEmail_Vendedor`, `Endereco_Vendedor_idEndereco_vendedor`, `Fornecedor_idFornecedor`), -- Define a chave primária como uma combinação de 'idVendedor', 'Telefone_Vendedor_idTelefone',
-- 'Email_Vendedor_idEmail_Vendedor', 'Endereco_Vendedor_idEndereco_vendedor' e 'Fornecedor_idFornecedor'.
-- Isso garante que cada vendedor seja único em combinação com esses valores.
  INDEX `fk_Vendedor_Telefone_Vendedor1_idx` (`Telefone_Vendedor_idTelefone` ASC) , -- Índice para otimizar buscas e consultas que usam 'Telefone_Vendedor_idTelefone'.
  INDEX `fk_Vendedor_Email_Vendedor1_idx` (`Email_Vendedor_idEmail_Vendedor` ASC) , -- Índice para otimizar buscas e consultas que usam 'Email_Vendedor_idEmail_Vendedor'.
  INDEX `fk_Vendedor_Endereco_Vendedor1_idx` (`Endereco_Vendedor_idEndereco_vendedor` ASC) , -- Índice para otimizar buscas e consultas que usam 'Endereco_Vendedor_idEndereco_vendedor'.
  INDEX `fk_Vendedor_Fornecedor1_idx` (`Fornecedor_idFornecedor` ASC) , -- Índice para otimizar buscas e consultas que usam 'Fornecedor_idFornecedor'.
  CONSTRAINT `fk_Vendedor_Telefone_Vendedor1`-- Restrição que garante que 'Telefone_Vendedor_idTelefone' deve existir na tabela 'Telefone_Vendedor'. Caso contrário, não será possível inserir ou atualizar dados nesta tabela.
    FOREIGN KEY (`Telefone_Vendedor_idTelefone`)
    REFERENCES `mydb`.`Telefone_Vendedor` (`idTelefone`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Vendedor_Email_Vendedor1` -- Restrição que garante que 'Email_Vendedor_idEmail_Vendedor' deve existir na tabela 'Email_Vendedor'. Caso contrário, não será possível inserir ou atualizar dados nesta tabela.
    FOREIGN KEY (`Email_Vendedor_idEmail_Vendedor`)
    REFERENCES `mydb`.`Email_Vendedor` (`idEmail_Vendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Vendedor_Endereco_Vendedor1` -- Restrição que garante que 'Endereco_Vendedor_idEndereco_vendedor' deve existir na tabela 'Endereco_Vendedor'.
-- Caso contrário, não será possível inserir ou atualizar dados nesta tabela.
    FOREIGN KEY (`Endereco_Vendedor_idEndereco_vendedor`)
    REFERENCES `mydb`.`Endereco_Vendedor` (`idEndereco_vendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Vendedor_Fornecedor1` -- Restrição que garante que 'Fornecedor_idFornecedor' deve existir na tabela 'Fornecedor'.
-- Caso contrário, não será possível inserir ou atualizar dados nesta tabela.
    FOREIGN KEY (`Fornecedor_idFornecedor`)
    REFERENCES `mydb`.`Fornecedor` (`idFornecedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Produto"
-- Essa tabela armazena as informações dos Produtos.
-- -----------------------------------------------------
-- Table `mydb`.`Produto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Produto` (
  `idProduto` INT NOT NULL auto_increment, -- Identificador único do produto.
  `nome_produto` VARCHAR(90) NOT NULL, -- Nome do produto.
  `descricao` VARCHAR(90) NOT NULL, -- Descrição do produto.
  `preco` INT NOT NULL, -- Preço do produto.
  `estoque` INT NOT NULL, -- Quantidade disponível do produto.
  `Categoria_idCategoria` INT NOT NULL, -- ID da categoria do produto. Relacionado à tabela 'Categoria', não pode ser nulo.
  `Vendedor_idVendedor` INT NOT NULL, -- ID do vendedor que oferece o produto. Relacionado à tabela 'Vendedor', não pode ser nulo.
  PRIMARY KEY (`idProduto`, `Categoria_idCategoria`, `Vendedor_idVendedor`), -- Define a chave primária combinando 'idProduto', 'Categoria_idCategoria' e 'Vendedor_idVendedor'. Garante que cada produto seja único com base nesses três campos.
  INDEX `fk_Produto_Categoria1_idx` (`Categoria_idCategoria` ASC) , -- Índice para acelerar buscas que usam 'Categoria_idCategoria'.
  INDEX `fk_Produto_Vendedor1_idx` (`Vendedor_idVendedor` ASC) , -- Índice para acelerar buscas que usam 'Vendedor_idVendedor'.
  CONSTRAINT `fk_Produto_Categoria1`  -- Restrição de integridade referencial que garante que 'Categoria_idCategoria' deve existir na tabela 'Categoria'. Se não existir, não será possível inserir ou atualizar o produto.
    FOREIGN KEY (`Categoria_idCategoria`)
    REFERENCES `mydb`.`Categoria` (`idCategoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Produto_Vendedor1` /*Restringe o campo 'Vendedor_idVendedor' na tabela 'Produto' a valores existentes na tabela 'Vendedor'. Isso garante que cada produto está associado a um vendedor válido. 
  Se um vendedor for removido da tabela 'Vendedor', a ação 'NO ACTION' garante que nenhuma alteração será feita automaticamente na tabela 'Produto'. O mesmo se aplica para atualizações no 'id_Vendedor'. */
    FOREIGN KEY (`Vendedor_idVendedor`)
    REFERENCES `mydb`.`Vendedor` (`idVendedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Telefone_Cliente"
-- Essa tabela armazena os números de telefone dos Clientes.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Telefone_Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Telefone_Cliente` (
  `idTelefone_Cliente` INT NOT NULL auto_increment, -- Identificador único para cada telefone.
  `telefone_cliente` VARCHAR(45) NOT NULL, -- Número de telefone do cliente.
  `tipo` VARCHAR(45) NOT NULL, -- Tipo de telefone (ex: celular, fixo...).
  PRIMARY KEY (`idTelefone_Cliente`)) -- Define uma chave primária composta, garantindo que cada telefone seja único para um cliente específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Email_Cliente"
-- Essa tabela armazena os números de emails dos Clientes.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Email_Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Email_Cliente` (
  `idEmail_Cliente` INT NOT NULL auto_increment, -- Identificador único para cada e-mail.
  `email_cliente` VARCHAR(90) NOT NULL, -- Endereço de e-mail do cliente.
  PRIMARY KEY (`idEmail_Cliente`)) -- Define uma chave primária composta, garantindo que cada email seja único para um cliente específico.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Endereço_Cliente"
-- Essa tabela armazena o endereço dos Clientes.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Endereco_Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Endereco_Cliente` (
  `idendereco` INT NOT NULL auto_increment,  -- Identificador único para cada endereço.
  `rua` VARCHAR(45) NOT NULL, -- Nome da rua do endereço.
  `numero` INT NOT NULL, -- Número do imóvel no endereço.
  `bairro` VARCHAR(90) NOT NULL, -- Bairro onde o endereço está localizado.
  `complemento` varchar(90), -- Uma informção opcional caso haja a necessidade de complementar o endereço.
  `cep` INT NOT NULL, -- Código de Endereçamento Postal do endereço.
  `estado` VARCHAR(90) NOT NULL, -- Estado onde o endereço está localizado.
  `pais` VARCHAR(90) NOT NULL,  -- País onde o endereço está localizado.
  PRIMARY KEY (`idendereco`)) -- Define 'idendereco' como chave primária, garantindo que cada endereço é único.
ENGINE = InnoDB; -- Define o mecanismo de armazenamento da tabela como InnoDB, que oferece suporte a transações, integridade referencial e bloqueios em nível de linha.

-- Criação da tabela "Cliente"
-- Essa tabela armazena as informações sobre os Clientes.

-- -----------------------------------------------------
-- Table `mydb`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Cliente` (
  `idCliente` INT NOT NULL auto_increment,-- Identificador único para cada cliente.
  `nome` VARCHAR(90) NOT NULL,-- Identificador único para cada cliente.
  `cpf` INT NOT NULL,-- Número do CPF do cliente
  `Telefone_Cliente_idTelefone_Cliente` INT NOT NULL, -- Referência ao telefone do cliente.
  `Email_Cliente_idEmail_Cliente` INT NOT NULL,-- Referência ao e-mail do cliente.
  `Endereco_idendereco` INT NOT NULL, -- Referência ao endereço do cliente.
  PRIMARY KEY (`idCliente`, `Telefone_Cliente_idTelefone_Cliente`, `Email_Cliente_idEmail_Cliente`, `Endereco_idendereco`), -- Define a chave primária composta para garantir a unicidade.
  INDEX `fk_Cliente_Telefone_Cliente1_idx` (`Telefone_Cliente_idTelefone_Cliente` ASC) , -- Índice para otimizar consultas na coluna de telefone do cliente.
  INDEX `fk_Cliente_Email_Cliente1_idx` (`Email_Cliente_idEmail_Cliente` ASC) ,-- Índice para otimizar consultas na coluna de e-mail do cliente.
  INDEX `fk_Cliente_Endereco1_idx` (`Endereco_idendereco` ASC) , -- Índice para otimizar consultas na coluna de endereço do cliente.
  CONSTRAINT `fk_Cliente_Telefone_Cliente1`  -- Define a chave estrangeira para referenciar a tabela de telefones dos clientes.
    FOREIGN KEY (`Telefone_Cliente_idTelefone_Cliente`)
    REFERENCES `mydb`.`Telefone_Cliente` (`idTelefone_Cliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cliente_Email_Cliente1`  -- Define a chave estrangeira para referenciar a tabela de e-mails dos clientes.
    FOREIGN KEY (`Email_Cliente_idEmail_Cliente`)
    REFERENCES `mydb`.`Email_Cliente` (`idEmail_Cliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cliente_Endereco1` -- Define a chave estrangeira para referenciar a tabela de endereços.
    FOREIGN KEY (`Endereco_idendereco`)
    REFERENCES `mydb`.`Endereco_Cliente` (`idendereco`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- Criação da tabela `Data_Pedido`
-- Essa tabela armazena as datas dos pedidos.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Data_Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Data_Pedido` (
  `idData_Pedido` INT NOT NULL auto_increment,-- Identificador único para cada data de pedido.
  `dia_pedido` INT NOT NULL,-- Dia do pedido.
  `mes_pedido` VARCHAR(45) NOT NULL,-- Mês do pedido.
  `ano_pedido` INT NOT NULL, -- Ano do pedido.
  PRIMARY KEY (`idData_Pedido`))
ENGINE = InnoDB;

-- Criação da tabela `Pedido`
-- Tabela para armazenar informações sobre pedidos realizados.
-- Cada pedido é identificado por um 'idPedido' e está associado a um cliente e a uma data específica.
-- -----------------------------------------------------
-- Table `mydb`.`Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Pedido` (
  `idPedido` INT NOT NULL auto_increment,-- Identificador único para cada pedido.
  `status` VARCHAR(45) NOT NULL, -- Status atual do pedido (por exemplo, 'Pendente', 'Concluído').
  `Cliente_idCliente` INT NOT NULL,-- Referência ao cliente que fez o pedido (chave estrangeira).
  `Data_Pedido_idData_Pedido` INT NOT NULL,-- Referência à data em que o pedido foi feito (chave estrangeira).
  PRIMARY KEY (`idPedido`, `Cliente_idCliente`, `Data_Pedido_idData_Pedido`),  /* Define a combinação de 'idPedido', 'Cliente_idCliente' e 'Data_Pedido_idData_Pedido' como chave primária.
  Isso garante que cada pedido para um cliente em uma data específica seja único.*/
  INDEX `fk_Pedido_Cliente1_idx` (`Cliente_idCliente` ASC) ,-- Índice para otimizar a busca por cliente.
  INDEX `fk_Pedido_Data_Pedido1_idx` (`Data_Pedido_idData_Pedido` ASC) ,-- Índices para otimizar a busca por data do pedido.
  CONSTRAINT `fk_Pedido_Cliente1`  -- Restrições de chave estrangeira para garantir integridade referencial.
    FOREIGN KEY (`Cliente_idCliente`)
    REFERENCES `mydb`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_Data_Pedido1`  -- Restrições de chave estrangeira para garantir integridade referencial.
    FOREIGN KEY (`Data_Pedido_idData_Pedido`)
    REFERENCES `mydb`.`Data_Pedido` (`idData_Pedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- Criação da tabela `Item_Pedido`
-- Tabela para armazenar informações sobre pedidos realizados.
-- Cada item de pedido inclui uma quantidade e o preço unitário do produto.
-- Está associado a um pedido específico e a um produto específico.
-- -----------------------------------------------------
-- Table `mydb`.`Item_Pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Item_Pedido` (
  `idItem_Pedido` INT NOT NULL auto_increment,-- Identificador único para cada item no pedido.
  `quantidade` INT NOT NULL,-- Quantidade do produto no pedido.
  `preco_unitario` INT NOT NULL, -- Preço unitário do produto.
  `Pedido_idPedido` INT NOT NULL, -- Referência ao pedido ao qual o item pertence (chave estrangeira).
  `Produto_idProduto` INT NOT NULL, -- Referência ao produto que foi pedido (chave estrangeira).
  PRIMARY KEY (`idItem_Pedido`, `Pedido_idPedido`, `Produto_idProduto`),  /* Define a combinação de 'idItem_Pedido', 'Pedido_idPedido' e 'Produto_idProduto' como chave primária. 
  Garante que cada item em um pedido seja único por combinação de ID do item, pedido e produto.*/
  INDEX `fk_Item_Pedido_Pedido1_idx` (`Pedido_idPedido` ASC) , -- Índices para otimizar a busca por pedido.
  INDEX `fk_Item_Pedido_Produto1_idx` (`Produto_idProduto` ASC) , -- Índices para otimizar a busca por produto.
  CONSTRAINT `fk_Item_Pedido_Pedido1`  -- Restrições de chave estrangeira para garantir integridade referencial.
    FOREIGN KEY (`Pedido_idPedido`)
    REFERENCES `mydb`.`Pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Item_Pedido_Produto1`  -- Restrições de chave estrangeira para garantir integridade referencial.
    FOREIGN KEY (`Produto_idProduto`)
    REFERENCES `mydb`.`Produto` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- Criação da tabela `Data_Pagamento`
-- Essa tabela armazena as datas dos pagamentos.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Data_Pagamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Data_Pagamento` (
  `idData_Pagamento` INT NOT NULL auto_increment,-- Identificador único para cada data de pagamento.
  `dia_pagamento` INT NOT NULL, -- Dia do pagamento.
  `mes_pagamento` VARCHAR(45) NOT NULL, -- Mês do pagamento (em formato textual).
  `ano_pagamento` INT NOT NULL, -- Ano do pagamento.
  PRIMARY KEY (`idData_Pagamento`))
ENGINE = InnoDB;

-- Criação da tabela `Pagamento`
-- Tabela para armazenar informações sobre os pagamentos realizados.
-- Contém detalhes do pagamento, incluindo o valor, método de pagamento e as referências para o pedido e a data do pagamento.
-- -----------------------------------------------------
-- Table `mydb`.`Pagamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Pagamento` (
  `idPagamento` INT NOT NULL auto_increment, -- Identificador único para cada pagamento.
  `valor` INT NOT NULL, -- Valor do pagamento.
  `metodo_pagamento` VARCHAR(45) NOT NULL,-- Método utilizado para o pagamento (ex: cartão de crédito, boleto).
  `Pedido_idPedido` INT NOT NULL, -- Referência para o pedido associado a este pagamento.
  `Data_Pagamento_idData_Pagamento` INT NOT NULL, -- Referência para a data do pagamento.
  PRIMARY KEY (`idPagamento`, `Pedido_idPedido`, `Data_Pagamento_idData_Pagamento`), -- Define a chave primária composta por 'idPagamento', 'Pedido_idPedido', e 'Data_Pagamento_idData_Pagamento'.
  INDEX `fk_Pagamento_Pedido1_idx` (`Pedido_idPedido` ASC) , -- Índices para melhorar a performance das buscas.
  INDEX `fk_Pagamento_Data_Pagamento1_idx` (`Data_Pagamento_idData_Pagamento` ASC) , -- Índices para melhorar a performance das buscas.
  CONSTRAINT `fk_Pagamento_Pedido1` -- Restrições de chave estrangeira para garantir integridade referencial.
    FOREIGN KEY (`Pedido_idPedido`)
    REFERENCES `mydb`.`Pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pagamento_Data_Pagamento1` -- Restrições de chave estrangeira para garantir integridade referencial.
    FOREIGN KEY (`Data_Pagamento_idData_Pagamento`)
    REFERENCES `mydb`.`Data_Pagamento` (`idData_Pagamento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- Criação da tabela `Data_Envio`
-- Essa tabela armazena as datas de envio dos pedidos.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.

-- -----------------------------------------------------
-- Table `mydb`.`Data_Envio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Data_Envio` (
  `idData_Envio` INT NOT NULL auto_increment,-- Identificador único para cada data de envio.
  `dia_envio` INT NOT NULL, -- Dia em que o envio ocorreu.
  `mes_envio` VARCHAR(45) NOT NULL,-- Mês em que o envio ocorreu.
  `ano_envio` INT NOT NULL, -- Ano em que o envio ocorreu.
  PRIMARY KEY (`idData_Envio`))
ENGINE = InnoDB;

-- Criação da tabela `Data_Entrega`
-- Essa tabela armazena as datas de entrega dos pedidos.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Data_Entrega`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Data_Entrega` (
  `idData_Entrega` INT NOT NULL auto_increment, -- Identificador único para cada data de entrega.
  `dia_entrega` INT NOT NULL,-- Dia da entrega.
  `mes_entrega` VARCHAR(45) NOT NULL,-- Mês da entrega (em texto, por exemplo, "Fevereiro").
  `ano_entrega` INT NOT NULL,-- Ano da entrega.
  `status` VARCHAR(90) NOT NULL,-- Status da entrega (por exemplo, "Entregue", "Pendente").
  PRIMARY KEY (`idData_Entrega`))
ENGINE = InnoDB;

-- Criação da tabela "Endereço_Entrega"
-- Tabela para armazenar endereços de entrega dos pedidos.
-- Contém detalhes sobre o endereço completo de entrega, incluindo rua, número, bairro, CEP, estado e país.
-- A tabela está normalizada para evitar duplicação e garantir a integridade dos dados.
-- -----------------------------------------------------
-- Table `mydb`.`Endereco_Entrega`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Endereco_Entrega` (
  `idEndereco_Entrega` INT NOT NULL auto_increment,-- Identificador único para cada endereço de entrega.
  `rua` VARCHAR(45) NOT NULL,-- Rua do endereço de entrega.
  `numero` INT NOT NULL, -- Número do endereço de entrega.
  `bairro` VARCHAR(45) NOT NULL, -- Bairro do endereço de entrega.
  `complemento` varchar(90), -- Uma informção opcional caso haja a necessidade de complementar o endereço.
  `cep` INT NOT NULL,-- Código de Endereçamento Postal (CEP) do endereço de entrega.
  `estado` VARCHAR(45) NOT NULL, -- Estado do endereço de entrega.
  `pais` VARCHAR(45) NOT NULL,-- País do endereço de entrega.
  PRIMARY KEY (`idEndereco_Entrega`))
ENGINE = InnoDB;

-- Criação da tabela "Entrega"
-- Tabela que registra informações sobre as entregas realizadas.
-- -----------------------------------------------------
-- Table `mydb`.`Entrega`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Entrega` (
  `idEntrega` INT NOT NULL auto_increment,-- Identificador único para cada entrega.
  `Pedido_idPedido` INT NOT NULL, -- Identificador do pedido associado à entrega.
  `Data_Envio_idData_Envio` INT NOT NULL, -- Identificador da data em que o envio ocorreu.
  `Data_Entrega_idData_Entrega` INT NOT NULL, -- Identificador da data em que a entrega foi realizada.
  `Endereco_Entrega_idEndereco_Entrega` INT NOT NULL,-- Identificador do endereço de entrega.
  PRIMARY KEY (`idEntrega`, `Pedido_idPedido`, `Data_Envio_idData_Envio`, `Data_Entrega_idData_Entrega`, `Endereco_Entrega_idEndereco_Entrega`), -- Define a chave primária composta por todos os identificadores para garantir a unicidade de cada registro.
  INDEX `fk_Entrega_Pedido1_idx` (`Pedido_idPedido` ASC) ,  -- Cria índices para melhorar o desempenho das consultas nas colunas de chaves estrangeiras.
  INDEX `fk_Entrega_Data_Envio1_idx` (`Data_Envio_idData_Envio` ASC) ,  -- Cria índices para melhorar o desempenho das consultas nas colunas de chaves estrangeiras.
  INDEX `fk_Entrega_Data_Entrega1_idx` (`Data_Entrega_idData_Entrega` ASC) ,  -- Cria índices para melhorar o desempenho das consultas nas colunas de chaves estrangeiras.
  INDEX `fk_Entrega_Endereco_Entrega1_idx` (`Endereco_Entrega_idEndereco_Entrega` ASC) ,  -- Cria índices para melhorar o desempenho das consultas nas colunas de chaves estrangeiras.
  CONSTRAINT `fk_Entrega_Pedido1` -- Define as chaves estrangeiras para garantir a integridade referencial com outras tabelas.
    FOREIGN KEY (`Pedido_idPedido`)
    REFERENCES `mydb`.`Pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Entrega_Data_Envio1` -- Define as chaves estrangeiras para garantir a integridade referencial com outras tabelas.
    FOREIGN KEY (`Data_Envio_idData_Envio`)
    REFERENCES `mydb`.`Data_Envio` (`idData_Envio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Entrega_Data_Entrega1` -- Define as chaves estrangeiras para garantir a integridade referencial com outras tabelas.
    FOREIGN KEY (`Data_Entrega_idData_Entrega`)
    REFERENCES `mydb`.`Data_Entrega` (`idData_Entrega`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Entrega_Endereco_Entrega1` -- Define as chaves estrangeiras para garantir a integridade referencial com outras tabelas.
    FOREIGN KEY (`Endereco_Entrega_idEndereco_Entrega`)
    REFERENCES `mydb`.`Endereco_Entrega` (`idEndereco_Entrega`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
